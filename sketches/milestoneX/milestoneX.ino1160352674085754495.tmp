/* This example shows how to use continuous mode to take
  range measurements with the VL53L0X. It is based on
  vl53l0x_ContinuousRanging_Example.c from the VL53L0X API.

  The range readings are in units of mm. */

#include <Wire.h>
#include <VL53L0X.h>
#include <DRV8835MotorShield.h>
#include <QTRSensors.h>
#include <SPI.h>
#include "nRF24L01.h"
#include "RF24.h"

// Distance Sensors
#define XSHUT_pinA 1
#define XSHUT_pinB 0
#define sensorA_newAddress 42
#define sensorB_newAddress 43
VL53L0X sensorA, sensorB, sensorC;

// Line Sensors
#define NUM_SENSORS   4     // number of line sensors used
#define TIMEOUT       2500  // waits for 2500 microseconds for sensor outputs to go low
#define EMITTER_PIN   QTR_NO_EMITTER_PIN     // emitter is controlled by digital pin 2, jk not
QTRSensorsRC qtrrc((unsigned char[]) {
  5, 4, 3, 2
},
NUM_SENSORS, TIMEOUT, EMITTER_PIN);
unsigned int sensorValues[NUM_SENSORS];


// Motor driver
DRV8835MotorShield motors;
unsigned short speed = 200;
// uses pins 10, 9, 8, 7

int distLeft, distRight, distCenter;
int state;


void setup()
{
  Wire.begin();

  pinMode(XSHUT_pinA, OUTPUT);
  pinMode(XSHUT_pinB, OUTPUT);

  sensorA.setAddress(sensorA_newAddress);
  pinMode(XSHUT_pinA, INPUT);
  delay(10);
  sensorB.setAddress(sensorB_newAddress);
  pinMode(XSHUT_pinB, INPUT);
  delay(10);

  Serial.begin(115200);
  // wait 2 seconds
  delay(2000);

  sensorA.init();
  sensorB.init();
  sensorC.init();

  sensorA.setTimeout(500);
  sensorB.setTimeout(500);
  sensorC.setTimeout(500);

  sensorA.startContinuous();
  sensorB.startContinuous();
  sensorC.startContinuous();

  // Motors
  motors.flipM1(true);
}

void loop()
{
  // read line sensors
//  qtrrc.read(sensorValues);
//  for (unsigned char i = 0; i < NUM_SENSORS; i++)
//  {
//    state += 10^i * (sensorValues[i] > );
//  } 
  //Serial.println(state);

  // read distance sensors
  distLeft = sensorB.readRangeContinuousMillimeters();
  distRight = sensorA.readRangeContinuousMillimeters();
  distCenter = sensorC.readRangeContinuousMillimeters();



}

//Serial.print("Left: ");
//Serial.print(distLeft);
//Serial.print("  Center: ");
//Serial.print(distCenter);
//Serial.print("  Right: ");
//Serial.print(distRight);
//Serial.println();

// print the sensor values as numbers from 0 to 2500, where 0 means maximum reflectance
//  for (unsigned char i = 0; i < NUM_SENSORS; i++)
//  {
//    Serial.print(sensorValues[i]);
//    Serial.print('\t');
//  }
